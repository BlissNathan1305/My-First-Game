<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2D Calculator</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <script src="https://unpkg.com/@tailwindcss/browser@latest"></script>
    <style>
        .calculator {
            background-color: #2d3748; /* Dark gray background */
            border-radius: 0.5rem; /* Rounded corners */
            padding: 1.25rem; /* Padding */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08); /* Shadow */
            width: 320px; /* Fixed width */
        }

        .display {
            width: 100%;
            padding: 0.75rem 1rem; /* Padding */
            margin-bottom: 1rem; /* Margin bottom */
            font-size: 1.5rem; /* Font size */
            text-align: right;
            background-color: #edf2f7; /* Light gray display background */
            border: 1px solid #cbd5e0; /* Border */
            border-radius: 0.375rem; /* Rounded corners */
            overflow: hidden;          /* Ensure long numbers don't overflow */
            white-space: nowrap;      /* Prevent text wrapping */
            word-wrap: break-word;    /* Handle very long numbers */
            min-height: 2.75rem;       /* Ensure display doesn't collapse when empty. */
        }

        .buttons {
            display: grid;
            grid-template-columns: repeat(4, 1fr); /* 4 columns */
            gap: 0.75rem; /* Gap between buttons */
        }
        .button {
             padding: 0.75rem 0;  /* vertical padding, 0 horizontal */
            font-size: 1.25rem;
            text-align: center;
            border: 1px solid #4a5568; /* Darker border */
            border-radius: 0.375rem;
            cursor: pointer;
            transition: background-color 0.2s ease; /* Smooth transition */
            background-color: #4a5568; /* Dark button color */
            color: #fff;
        }

      .button:hover {
            background-color: #718096; /* Slightly lighter on hover */
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);  /* Add a subtle shadow on hover */
      }
      .number, .decimal {
          background-color: #6b7280; /* Medium gray for numbers */
      }
      .number:hover, .decimal:hover{
         background-color: #9ca3af;
      }

      .operator {
            background-color: #f59e0b; /* Orange for operators */
        }

       .operator:hover {
            background-color: #ed8936; /* Darker orange on hover */
        }
        .equals {
            background-color: #48bb78; /* Green for equals */
        }
        .equals:hover {
             background-color: #38a169;
        }

        .clear {
            background-color: #e53e3e; /* Red for clear */
        }

        .clear:hover {
            background-color: #c53030; /* Darker red on hover */
        }

        #zero {
            grid-column: span 2; /* Make the zero button span two columns */
        }
        .del{
            background-color: #a0aec0;
        }
        .del:hover{
            background-color: #718096;
        }
    </style>
</head>
<body class="bg-gray-100 font-sans antialiased">
    <div class="calculator">
        <div class="display" id="display">0</div>
        <div class="buttons">
            <button class="button clear" onclick="clearDisplay()">C</button>
            <button class="button del" onclick="deleteLast()">DEL</button>
            <button class="button operator" onclick="appendOperator('/')">รท</button>
            <button class="button number" onclick="appendNumber('7')">7</button>
            <button class="button number" onclick="appendNumber('8')">8</button>
            <button class="button number" onclick="appendNumber('9')">9</button>
            <button class="button operator" onclick="appendOperator('*')">ร</button>
            <button class="button number" onclick="appendNumber('4')">4</button>
            <button class="button number" onclick="appendNumber('5')">5</button>
            <button class="button number" onclick="appendNumber('6')">6</button>
            <button class="button operator" onclick="appendOperator('-')">-</button>
            <button class="button number" onclick="appendNumber('1')">1</button>
            <button class="button number" onclick="appendNumber('2')">2</button>
            <button class="button number" onclick="appendNumber('3')">3</button>
            <button class="button operator" onclick="appendOperator('+')">+</button>
            <button class="button number" id="zero" onclick="appendNumber('0')">0</button>
            <button class="button decimal" onclick="appendDecimal()">.</button>
            <button class="button equals" onclick="calculate()">=</button>
        </div>
    </div>

    <script>
        let display = document.getElementById('display');
        let currentInput = '0'; // Initialize with '0'
        let previousOperand = null;
        let operator = null;
        let shouldResetDisplay = false;

        function updateDisplay() {
            display.textContent = currentInput;
        }

        function appendNumber(number) {
            if (shouldResetDisplay || currentInput === '0' || currentInput === 'Infinity' || currentInput === '-Infinity' || isNaN(parseFloat(currentInput))) {
                currentInput = number;
                shouldResetDisplay = false;
            } else {
                currentInput += number;
            }
            updateDisplay();
        }

        function appendDecimal() {
            if (!currentInput.includes('.')) {
                currentInput += '.';
                updateDisplay();
            }
        }

        function appendOperator(newOperator) {
            if (currentInput !== '0' && currentInput !== '-' && !isNaN(parseFloat(currentInput)) && previousOperand !== null && operator !== null) {
                calculate(); // Perform pending calculation
            }
            if(currentInput === '0' && newOperator === '-') {
                currentInput = '-'; // Allow starting with negative sign
                updateDisplay()
                return
            }

            previousOperand = parseFloat(currentInput);
            operator = newOperator;
            shouldResetDisplay = true;
        }



        function calculate() {
          if (operator === null || previousOperand === null || currentInput === '0' || currentInput === '-' || isNaN(parseFloat(currentInput))) return;

            const currentOperand = parseFloat(currentInput);
            let result;

            switch (operator) {
                case '+':
                    result = previousOperand + currentOperand;
                    break;
                case '-':
                    result = previousOperand - currentOperand;
                    break;
                case '*':
                    result = previousOperand * currentOperand;
                    break;
                case '/':
                    if (currentOperand === 0) {
                        result = 'Infinity'; // Or handle as an error
                        break;
                    }
                    result = previousOperand / currentOperand;
                    break;
                default:
                    return;
            }

            currentInput = String(result);
            operator = null;
            previousOperand = null;
            shouldResetDisplay = true;
            updateDisplay();
        }

        function clearDisplay() {
            currentInput = '0';
            previousOperand = null;
            operator = null;
            shouldResetDisplay = false;
            updateDisplay();
        }
        function deleteLast(){
            currentInput = currentInput.slice(0, -1);
             if (currentInput === '') {
                currentInput = '0';
            }
            updateDisplay()
        }

        // Initialize display
        updateDisplay();
    </script>
</body>
</html>


